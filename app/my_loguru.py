
import logging
import traceback
from loguru import logger

LOG_PATH = r'app\logs\log_'

other_logs = logging.getLogger('other_logs')
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[logging.FileHandler(f'{LOG_PATH}other.log')],
)

class Logger:
    """
    –ö–ª–∞—Å—Å Logger –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ loguru –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π: INFO, ERROR, WARNING, DEBUG, –∞ —Ç–∞–∫–∂–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å REQUEST.
    """
    # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∞
    __message_format = "{time:YYYY-MM-DD HH:mm:ss} :: {level} :: {message}"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ loguru –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–∞–π–ª–æ–≤
    logger.add(f"{LOG_PATH}info.log", format=__message_format, level="INFO", rotation="100 MB",
               filter=lambda record: record["level"].name == 'INFO')

    logger.add(f"{LOG_PATH}error.log", format=__message_format, level="ERROR", rotation="100 MB",
               filter=lambda record: record["level"].name == 'ERROR', backtrace=True, diagnose=True)

    logger.add(f"{LOG_PATH}warning.log", format=__message_format, level="WARNING", rotation="100 MB",
               filter=lambda record: record["level"].name == 'WARNING')

    logger.add(f"{LOG_PATH}debug.log", format=__message_format, level="DEBUG", rotation="100 MB",
               filter=lambda record: record["level"].name == 'DEBUG')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    new_level = logger.level("REQUEST", no=38, color="<green>", icon="üêç")
    logger.add(f"{LOG_PATH}/requests/" + '{time:YYYY-MM}.log', format='{time:YYYY-MM-DD HH:mm:ss}|{message}',
               level="REQUEST", rotation="100 MB", filter=lambda record: record["level"].name == 'REQUEST')

    catch = logger.catch

    @staticmethod
    def _get_mes(args: list, sep=' ', traceback=''):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞, –æ–±—ä–µ–¥–∏–Ω—è—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
        """
        mes = sep.join(map(str, args))
        if traceback:
            mes += f'\n{traceback}'
        return mes.replace('\n', '\n\t-> ')

    @classmethod
    def __get_traceback_coll(cls):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –≤ –∫–æ–¥–µ, –æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω –ª–æ–≥.
        """
        traceback_info = traceback.extract_stack()[-3]
        file_name, line_number, place, _ = traceback_info
        return f'Traceback: "{file_name}:{line_number}" in {place}'

    @classmethod
    def info(cls, *args: str, sep=' ', is_traceback=False):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        tb = cls.__get_traceback_coll() if is_traceback else ''
        logger.info(cls._get_mes(args, sep, tb))

    @classmethod
    def debug(cls, *args: str, sep=' ', is_traceback=False):
        tb = cls.__get_traceback_coll() if is_traceback else ''
        logger.debug(cls._get_mes(args, sep, tb))

    @classmethod
    def warning(cls, *args: str, sep=' ', is_traceback=False):
        tb = cls.__get_traceback_coll() if is_traceback else ''
        logger.warning(cls._get_mes(args, sep, tb))

    @classmethod
    def exception(cls, *args: str, sep=' '):
        tb = cls.__get_traceback_coll()
        logger.exception(cls._get_mes(args, sep, tb))

    @classmethod
    def error(cls, *args: str, sep=' '):
        tb = cls.__get_traceback_coll()
        logger.error(cls._get_mes(args, sep, tb))

    @classmethod
    def request(cls, *args: str, sep=' '):
        logger.log("REQUEST", cls._get_mes(args, sep))